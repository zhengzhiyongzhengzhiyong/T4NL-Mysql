<#@ template debug="debug" hostspecific="true" language="C#" #>
 <#@ include file="$(SolutionDir)\T4NL.Model\T4Manager.ttinclude" #>
 <#@ include file="$(SolutionDir)\T4NL.Model\EntityHelper.ttinclude" #>
 <# 
     
     // 文件版权信息
     var copyright = DateTime.Now.Year + " T4NL Enterprises All Rights Reserved";
     var version = Environment.Version;
     var author = "auto generated by T4";
 
     var manager = Manager.Create(Host, GenerationEnvironment);
     var entities = EntityHelper.GetEntities();
 
     foreach(Entity entity in entities)
     {
         manager.StartNewFile(entity.EntityName + "DAL.cs");
 #>
 using System.Text;
 using System.Collections.Generic; 
 using System.Data;
 using T4NL.Model;
 using T4NL.Common;
 using MySql.Data.MySqlClient;
 using MySqlHelper = T4NL.Common.MySqlHelper;
 
 namespace T4NL.DAL
 {
      public partial class <#= entity.EntityName+"DAL" #>
      {
	    
		private MySqlDataReader _reader;

		/// <summary>
        /// 判断是否存在
        /// </summary>
	    public bool Exists(<#=entity.Fields[0].dataType #> <#=entity.Fields[0].columnName #>)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select count(1) from <#= entity.EntityName #>");
			strSql.Append(" where <#=entity.Fields[0].columnName #>=@<#=entity.Fields[0].columnName #>");

			MySqlParameter[] parameters = {
                    new MySqlParameter("@<#=entity.Fields[0].columnName #>", MySqlDbType.Int32,11)
            };

			parameters[0].Value = <#=entity.Fields[0].columnName #>;
           
		    return int.Parse(MySqlHelper.ExecuteScalar(BasicConfig.ConnectionString, CommandType.Text, strSql.ToString(), parameters).ToString()) > 0 ? true : false;
		}

	    /// <summary>
		/// 增加一条数据
		/// </summary>
		public bool Add(<#= entity.EntityName #> model)
		{
			StringBuilder strSql=new StringBuilder();
			strSql.Append("insert into <#= entity.EntityName  #>(");			
            strSql.Append(" <# for(int i=1;i<entity.Fields.Count;i++) { Field c = entity.Fields[i];#><#= c.columnName #><# if (i< entity.Fields.Count-1 ) {#>,<#}#><#}#>");
			strSql.Append(") values (");
			strSql.Append(" <# for(int i=1;i< entity.Fields.Count;i++) {   Field c = entity.Fields[i];#><#= "@"+c.columnName#><# if (i< entity.Fields.Count-1 ) {#>,<#}#><#}#>");
            strSql.Append(") ");
			strSql.Append(";select @@IDENTITY");

		    MySqlParameter[] parameters = {
			<# for(int i=1;i< entity.Fields.Count;i++)
            {   
                Field c = entity.Fields[i];
            #>
               new MySqlParameter("@<#=c.columnName#>", MySqlDbType.<#=EntityHelper.DbTypeLength(c.dataType, c.columnType,c.characterMaximumLength)#>)<# if (i< entity.Fields.Count-1 ){#>,<#}#>            
            <#}#>  
            };

		    <# for(int i=1;i< entity.Fields.Count;i++)
            {   
                Field c = entity.Fields[i];
            #>
			parameters[<#= i-1 #>].Value = model.<#=entity.Fields[i].columnName#>;          
            <#}#>  

			return MySqlHelper.ExecuteNonQuery(BasicConfig.ConnectionString, CommandType.Text, strSql.ToString(), parameters)>0;
		}

	    /// <summary>
		/// 更新一条数据
		/// </summary>
		public bool Update(<#= entity.EntityName #> model)
		{
		    StringBuilder strSql=new StringBuilder();
			strSql.Append("update <#= entity.EntityName #> set ");

			<# for(int i=1;i< entity.Fields.Count;i++)
            {   
                Field c = entity.Fields[i];
            #>
			strSql.Append(" <#= entity.Fields[i].columnName#> = <#="@"+entity.Fields[i].columnName#>, ");           
            <#}#>
			strSql.Append(" where <#=entity.Fields[0].columnName#> = <#="@"+entity.Fields[0].columnName#>");

		    MySqlParameter[] parameters = {
			<# for(int i=0;i< entity.Fields.Count;i++)
            {   
                Field c = entity.Fields[i];
            #>
               new MySqlParameter("@<#=c.columnName#>", MySqlDbType.<#=EntityHelper.DbTypeLength(c.dataType, c.columnType,c.characterMaximumLength)#>)<# if (i< entity.Fields.Count-1 ){#>,<#}#>            
            <#}#>  
            };

		    <# for(int i=0;i< entity.Fields.Count;i++)
            {   
                Field c = entity.Fields[i];
            #>
			parameters[<#= i #>].Value = model.<#=entity.Fields[i].columnName#>;          
            <#}#> 

		    return MySqlHelper.ExecuteNonQuery(BasicConfig.ConnectionString, CommandType.Text, strSql.ToString(), parameters)>0;
		}

		/// <summary>
		/// 删除一条数据
		/// </summary>
		public bool Delete(<#=entity.Fields[0].dataType #> <#=entity.Fields[0].columnName #>)
		{
			
			StringBuilder strSql=new StringBuilder();
			strSql.Append("delete from <#= entity.EntityName #> ");
			strSql.Append(" where <#=entity.Fields[0].columnName#>=@<#=entity.Fields[0].columnName#> ");
						MySqlParameter[] parameters = {
					new MySqlParameter("@<#=entity.Fields[0].columnName#>", MySqlDbType.Int32,11)			};
			parameters[0].Value = <#=entity.Fields[0].columnName#>;

            return MySqlHelper.ExecuteNonQuery(BasicConfig.ConnectionString, CommandType.Text, strSql.ToString(), parameters)>0;
		}


		/// <summary>
		/// 得到一个对象实体
		/// </summary>
		public <#= entity.EntityName #> GetModel(<#=entity.Fields[0].dataType #> <#=entity.Fields[0].columnName #>)
		{
			
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select  <# for(int i=0;i<entity.Fields.Count;i++) { Field c = entity.Fields[i];#><#= c.columnName #><# if (i< entity.Fields.Count-1 ) {#>,<#}#><#}#>  ");			
			strSql.Append("  from <#= entity.EntityName #> ");
			strSql.Append(" where <#=entity.Fields[0].columnName #>=@<#=entity.Fields[0].columnName #> ");
						MySqlParameter[] parameters = {
					new MySqlParameter("@<#=entity.Fields[0].columnName #>", MySqlDbType.Int32,11)			};
			parameters[0].Value =<#=entity.Fields[0].columnName #>;

			_reader = MySqlHelper.ExecuteReader(BasicConfig.ConnectionString, CommandType.Text, strSql.ToString(), parameters);

			<#= entity.EntityName #> model =null;
			while (_reader.Read())
            {
			    model = new <#= entity.EntityName #>{
				   <# for(int i=0;i<entity.Fields.Count;i++) { Field c = entity.Fields[i];#>

				       <#=c.columnName #>=_reader["<#= c.columnName #>"].<#=EntityHelper.DbTypeHelper(c.dataType)#><# if(i< entity.Fields.Count-1){#>,<#}#>
				   <#}#>

				};
			}

			return model;
	    }

		/// <summary>
		/// 分页
		/// </summary>
		public List<<#=entity.EntityName#>> GetPage(string orderName, string order, int offset, int pageSize,<# if(!String.IsNullOrEmpty(entity.DateTimeColumnName)) {#> string stime, string etime, <#}#>string search,out int total)
		{
			
			StringBuilder strSql=new StringBuilder();
			strSql.Append("select  <# for(int i=0;i<entity.Fields.Count;i++) { Field c = entity.Fields[i];#><#= c.columnName #><# if (i< entity.Fields.Count-1 ) {#>,<#}#><#}#>  ");			
			strSql.Append("  from <#= entity.EntityName #> ");
			<# if(!String.IsNullOrEmpty(entity.DateTimeColumnName)) {#> 
			strSql.Append($" where  <#= entity.DateTimeColumnName#>>='{stime}' AND <#= entity.DateTimeColumnName#><'{etime}' "); 
			<#}#>
			strSql.Append($"  ORDER BY {orderName} {order} LIMIT {offset},{pageSize}; ");

		    StringBuilder strSqlCount=new StringBuilder();
		    strSqlCount.Append("  SELECT COUNT(1) FROM <#= entity.EntityName #> ");
		    <# if(!String.IsNullOrEmpty(entity.DateTimeColumnName)) {#> 
		    strSqlCount.Append($" where  <#= entity.DateTimeColumnName#>>='{stime}' AND <#= entity.DateTimeColumnName#><'{etime}' "); 
		    <#}#>

			_reader = MySqlHelper.ExecuteReader(BasicConfig.ConnectionString, CommandType.Text, strSql.ToString());

			List<<#=entity.EntityName#>> list = new List<<#=entity.EntityName#>>();
			while (_reader.Read())
            {
			    list.Add(new <#= entity.EntityName #>{
				   <# for(int i=0;i<entity.Fields.Count;i++) { Field c = entity.Fields[i];#>

				       <#=c.columnName #>=_reader["<#= c.columnName #>"].<#=EntityHelper.DbTypeHelper(c.dataType)#><# if(i< entity.Fields.Count-1){#>,<#}#>
				   <#}#>

				});
			}
			total = int.Parse(MySqlHelper.ExecuteScalar(MySqlHelper.ConnectionString, CommandType.Text, strSqlCount.ToString()).ToString());;
			return list;
	    }


      }
 }

  <#        
         manager.EndBlock(); 
     }
 
     manager.Process(true);
 #>